Index: src/main/java/com/javarush/telegram/TinderBoltApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.javarush.telegram;\r\n\r\nimport com.javarush.telegram.ChatGPTService;\r\nimport com.javarush.telegram.DialogMode;\r\nimport com.javarush.telegram.MultiSessionTelegramBot;\r\nimport com.javarush.telegram.UserInfo;\r\nimport org.slf4j.bridge.SLF4JBridgeHandler;\r\nimport org.telegram.telegrambots.meta.TelegramBotsApi;\r\nimport org.telegram.telegrambots.meta.api.objects.*;\r\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\r\nimport org.telegram.telegrambots.updatesreceivers.DefaultBotSession;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class TinderBoltApp extends MultiSessionTelegramBot {\r\n    public static final String TELEGRAM_BOT_NAME = \"AcidKoss_bot\"; //TODO: добавь имя бота в кавычках\r\n    public static final String TELEGRAM_BOT_TOKEN = \"7582583026:AAHObaQmUxb7E-cYYL66zvn0a-axs0smpfk\"; //TODO: добавь токен бота в кавычках\r\n    public static final String OPEN_AI_TOKEN = \"chat-gpt-token\"; //TODO: добавь токен ChatGPT в кавычках\r\n\r\n    public TinderBoltApp() {\r\n        super(TELEGRAM_BOT_NAME, TELEGRAM_BOT_TOKEN);\r\n    }\r\n\r\n    @Override\r\n    public void onUpdateEventReceived(Update update) {\r\n\r\n        sendTextMessage(\"Привет \");\r\n\r\n    }\r\n\r\n    public static void main(String[] args) throws TelegramApiException {\r\n        SLF4JBridgeHandler.removeHandlersForRootLogger();\r\n        SLF4JBridgeHandler.install();\r\n\r\n        java.util.logging.Logger telegramLogger =\r\n                java.util.logging.Logger.getLogger(\"org.telegram\");\r\n        telegramLogger.setLevel(java.util.logging.Level.ALL);\r\n\r\n        TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);\r\n        telegramBotsApi.registerBot(new TinderBoltApp());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/javarush/telegram/TinderBoltApp.java b/src/main/java/com/javarush/telegram/TinderBoltApp.java
--- a/src/main/java/com/javarush/telegram/TinderBoltApp.java	(revision b5ad24279d21f4eb520f8814cd268a54f89f2802)
+++ b/src/main/java/com/javarush/telegram/TinderBoltApp.java	(date 1756677931222)
@@ -24,18 +24,13 @@
     @Override
     public void onUpdateEventReceived(Update update) {
 
-        sendTextMessage("Привет ");
+        sendTextMessage("Привет");
+        sendTextButtonsMessage("Твои кнопки", "Кнопка1","/button1", "Кнопка2","/button2");
+        sendPhotoTextMessage("main", "Чат бот");
 
     }
 
     public static void main(String[] args) throws TelegramApiException {
-        SLF4JBridgeHandler.removeHandlersForRootLogger();
-        SLF4JBridgeHandler.install();
-
-        java.util.logging.Logger telegramLogger =
-                java.util.logging.Logger.getLogger("org.telegram");
-        telegramLogger.setLevel(java.util.logging.Level.ALL);
-
         TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);
         telegramBotsApi.registerBot(new TinderBoltApp());
     }
Index: src/main/java/com/javarush/telegram/MultiSessionTelegramBot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.javarush.telegram;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.telegram.telegrambots.bots.TelegramLongPollingBot;\r\nimport org.telegram.telegrambots.meta.api.methods.BotApiMethod;\r\nimport org.telegram.telegrambots.meta.api.methods.GetMe;\r\nimport org.telegram.telegrambots.meta.api.methods.GetUserProfilePhotos;\r\nimport org.telegram.telegrambots.meta.api.methods.commands.DeleteMyCommands;\r\nimport org.telegram.telegrambots.meta.api.methods.commands.GetMyCommands;\r\nimport org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;\r\nimport org.telegram.telegrambots.meta.api.methods.menubutton.SetChatMenuButton;\r\nimport org.telegram.telegrambots.meta.api.methods.reactions.SetMessageReaction;\r\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\r\nimport org.telegram.telegrambots.meta.api.methods.send.SendPhoto;\r\nimport org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;\r\nimport org.telegram.telegrambots.meta.api.objects.*;\r\nimport org.telegram.telegrambots.meta.api.objects.commands.BotCommand;\r\nimport org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeAllPrivateChats;\r\nimport org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeChat;\r\nimport org.telegram.telegrambots.meta.api.objects.menubutton.MenuButtonCommands;\r\nimport org.telegram.telegrambots.meta.api.objects.menubutton.MenuButtonDefault;\r\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;\r\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;\r\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.Serializable;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class MultiSessionTelegramBot extends TelegramLongPollingBot {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(MultiSessionTelegramBot.class);\r\n\r\n    private String name;\r\n    private String token;\r\n\r\n    private ThreadLocal<Update> updateEvent = new ThreadLocal<>();\r\n\r\n    public MultiSessionTelegramBot(String name, String token) {\r\n        this.name = name;\r\n        this.token = token;\r\n    }\r\n\r\n    @Override\r\n    public String getBotUsername() {\r\n        return name;\r\n    }\r\n\r\n    @Override\r\n    public String getBotToken() {\r\n        return token;\r\n    }\r\n\r\n    @Override\r\n    public final void onUpdateReceived(Update updateEvent) {\r\n        try {\r\n            this.updateEvent.set(updateEvent);\r\n            onUpdateEventReceived(this.updateEvent.get());\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public void onUpdateEventReceived(Update updateEvent) throws Exception {\r\n        //do nothing\r\n    }\r\n\r\n    /**\r\n     * Метод возвращает ID текущего Telegram-чата\r\n     */\r\n    public Long getCurrentChatId() {\r\n        if (updateEvent.get().hasMessage()) {\r\n            return updateEvent.get().getMessage().getFrom().getId();\r\n        }\r\n\r\n        if (updateEvent.get().hasCallbackQuery()) {\r\n            return updateEvent.get().getCallbackQuery().getFrom().getId();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Метод возвращает текст из последнего сообщения Telegram-чата\r\n     */\r\n    public String getMessageText() {\r\n        return updateEvent.get().hasMessage() ? updateEvent.get().getMessage().getText() : \"\";\r\n    }\r\n\r\n    public  boolean isMessageCommand() {\r\n        return updateEvent.get().hasMessage() && updateEvent.get().getMessage().isCommand();\r\n    }\r\n\r\n\r\n    /**\r\n     * Метод возвращает код нажатой кнопки (buttonKey).\r\n     * Речь идет о кнопках, которые были добавлены к сообщению.\r\n     */\r\n    public String getCallbackQueryButtonKey() {\r\n        return updateEvent.get().hasCallbackQuery() ? updateEvent.get().getCallbackQuery().getData() : \"\";\r\n    }\r\n\r\n    /**\r\n     * Метод отправляет в чат ТЕКСТ (текстовое сообщение).\r\n     * Поддерживается markdown-разметка.\r\n     */\r\n    public Message sendTextMessage(String text) {\r\n        long underscoreCount = text != null ? text.chars().filter(c -> c == '_').count() : 0;\r\n        if (underscoreCount % 2 == 0) {\r\n            SendMessage command = createApiSendMessageCommand(String.valueOf(text));\r\n            log.debug(\"Метод sendTextMessage \" + text);\r\n            return executeTelegramApiMethod(command);\r\n        } else {\r\n            var message = \"Строка '%s' является невалидной с точки зрения markdown. Воспользуйтесь методом sendHtmlMessage()\".formatted(text);\r\n            System.out.println(message);\r\n            return sendHtmlMessage(message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод отправляет в чат HTML (текстовое сообщение).\r\n     * Поддерживается html-разметка.\r\n     */\r\n    public Message sendHtmlMessage(String text) {\r\n        SendMessage message = new SendMessage();\r\n        message.setText(new String(text.getBytes(), StandardCharsets.UTF_8));\r\n        message.setParseMode(\"html\");\r\n        message.setChatId(getCurrentChatId());\r\n        return executeTelegramApiMethod(message);\r\n    }\r\n\r\n    /**\r\n     * Метод отправляет в чат ФОТО (Картинку).\r\n     * Картинка задается ключем - photoKey.\r\n     * Все картинки содержатся в папке resources/images\r\n     */\r\n    public Message sendPhotoMessage(String photoKey) {\r\n        SendPhoto command = createApiPhotoMessageCommand(photoKey, null);\r\n        return executeTelegramApiMethod(command);\r\n    }\r\n\r\n    /**\r\n     * Метод отправляет в чат ФОТО (Картинку) и ТЕКСТ.\r\n     * Картинка задается ключем - photoKey.\r\n     * Все картинки содержатся в папке resources/images\r\n     */\r\n    public Message sendPhotoTextMessage(String photoKey, String text)  {\r\n        SendPhoto command = createApiPhotoMessageCommand(photoKey, text);\r\n        return executeTelegramApiMethod(command);\r\n    }\r\n\r\n    /**\r\n     * Метод изменяет ТЕКСТ в уже отправленном сообщении.\r\n     */\r\n    public void updateTextMessage(Message message, String text) {\r\n        EditMessageText command = new EditMessageText();\r\n        command.setChatId(message.getChatId());\r\n        command.setMessageId(message.getMessageId());\r\n        command.setText(text);\r\n        executeTelegramApiMethod(command);\r\n    }\r\n\r\n    /**\r\n     * Сообщение с кнопками (Inline Buttons)\r\n     */\r\n    public Message sendTextButtonsMessage(String text, String... buttons) {\r\n        SendMessage command = createApiSendMessageCommand(text);\r\n        if (buttons.length > 0)\r\n            attachButtons(command, List.of(buttons));\r\n\r\n        return executeTelegramApiMethod(command);\r\n    }\r\n\r\n    /**\r\n     * Сообщение с кнопками (Inline Buttons)\r\n     */\r\n    public void sendTextButtonsMessage(String text, List<String> buttons) {\r\n        SendMessage command = createApiSendMessageCommand(text);\r\n        if (buttons != null && !buttons.isEmpty())\r\n            attachButtons(command, buttons);\r\n\r\n        executeTelegramApiMethod(command);\r\n    }\r\n\r\n    public void showMainMenu(String... commands) {\r\n        ArrayList<BotCommand> list = new ArrayList<BotCommand>();\r\n\r\n        //convert strings to command list\r\n        for (int i = 0; i < commands.length; i += 2) {\r\n            String description = commands[i];\r\n            String key = commands[i+1];\r\n\r\n            if (key.startsWith(\"/\")) //remove first /\r\n                key = key.substring(1);\r\n\r\n            BotCommand bc = new BotCommand(key, description);\r\n            list.add(bc);\r\n        }\r\n\r\n        //get commands list\r\n        var chatId = getCurrentChatId();\r\n        GetMyCommands gmcs = new GetMyCommands();\r\n        gmcs.setScope(BotCommandScopeChat.builder().chatId(chatId).build());\r\n        ArrayList<BotCommand> oldCommands = executeTelegramApiMethod(gmcs);\r\n\r\n        //ignore commands change for same command list\r\n        if (oldCommands.equals(list))\r\n            return;\r\n\r\n        //set commands list\r\n        SetMyCommands cmds = new SetMyCommands();\r\n        cmds.setCommands(list);\r\n        cmds.setScope(BotCommandScopeChat.builder().chatId(chatId).build());\r\n        executeTelegramApiMethod(cmds);\r\n\r\n        //show menu button\r\n        var ex = new SetChatMenuButton();\r\n        ex.setChatId(chatId);\r\n        ex.setMenuButton(MenuButtonCommands.builder().build());\r\n        executeTelegramApiMethod(ex);\r\n    }\r\n\r\n    public void hideMainMenu() {\r\n        //delete commands list\r\n        var chatId = getCurrentChatId();\r\n        DeleteMyCommands dmds = new DeleteMyCommands();\r\n        dmds.setScope(BotCommandScopeChat.builder().chatId(chatId).build());\r\n        executeTelegramApiMethod(dmds);\r\n\r\n        //hide menu button\r\n        var ex = new SetChatMenuButton();\r\n        ex.setChatId(chatId);\r\n        ex.setMenuButton(MenuButtonDefault.builder().build());\r\n        executeTelegramApiMethod(ex);\r\n    }\r\n\r\n    public List<List<PhotoSize>> getUserProfilePhotos() {\r\n        var userId = getCurrentChatId();\r\n        var request = GetUserProfilePhotos.builder().userId(userId).offset(0).limit(100).build();\r\n        UserProfilePhotos userProfilePhotos = executeTelegramApiMethod(request);\r\n        return userProfilePhotos.getPhotos();\r\n    }\r\n\r\n    public List<List<PhotoSize>> getChatBotProfilePhotos() {\r\n        var me = executeTelegramApiMethod(new GetMe());\r\n        var userId = me.getId();\r\n        var request = GetUserProfilePhotos.builder().userId(userId).offset(0).limit(100).build();\r\n        UserProfilePhotos userProfilePhotos = executeTelegramApiMethod(request);\r\n        return userProfilePhotos.getPhotos();\r\n    }\r\n\r\n    private SendMessage createApiSendMessageCommand(String text) {\r\n        SendMessage message = new SendMessage();\r\n        message.setText(new String(text.getBytes(), StandardCharsets.UTF_8));\r\n        message.setParseMode(\"markdown\");\r\n        message.setChatId(getCurrentChatId());\r\n        return message;\r\n    }\r\n\r\n    private void attachButtons(SendMessage message, List<String> buttons) {\r\n        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();\r\n        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();\r\n\r\n        for (int i = 0; i < buttons.size(); i += 2) {\r\n            String buttonName = buttons.get(i);\r\n            String buttonValue = buttons.get(i + 1);\r\n\r\n            InlineKeyboardButton button = new InlineKeyboardButton();\r\n            button.setText(new String(buttonName.getBytes(), StandardCharsets.UTF_8));\r\n            button.setCallbackData(buttonValue);\r\n\r\n            keyboard.add(List.of(button));\r\n        }\r\n\r\n        markup.setKeyboard(keyboard);\r\n        message.setReplyMarkup(markup);\r\n    }\r\n\r\n    private SendPhoto createApiPhotoMessageCommand(String photoKey, String text) {\r\n        try {\r\n            InputFile inputFile = new InputFile();\r\n            var is = loadImage(photoKey);\r\n            inputFile.setMedia(is, photoKey);\r\n\r\n            SendPhoto photo = new SendPhoto();\r\n            photo.setPhoto(inputFile);\r\n            photo.setChatId(getCurrentChatId());\r\n\r\n            if (text != null && !text.isEmpty())\r\n                photo.setCaption(text);\r\n\r\n            return photo;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Can't create photo message!\");\r\n        }\r\n    }\r\n\r\n\r\n    public static String loadPrompt(String name) {\r\n        try {\r\n            var is = ClassLoader.getSystemResourceAsStream(\"prompts/\" + name + \".txt\");\r\n            return new String(is.readAllBytes());\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"Can't load GPT prompt!\");\r\n        }\r\n    }\r\n\r\n    public static String loadMessage(String name) {\r\n        try {\r\n            var is = ClassLoader.getSystemResourceAsStream(\"messages/\" + name + \".txt\");\r\n            return new String(is.readAllBytes());\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"Can't load message!\");\r\n        }\r\n    }\r\n\r\n    public static InputStream loadImage(String name) {\r\n        try {\r\n            return ClassLoader.getSystemResourceAsStream(\"images/\" + name + \".jpg\");\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Can't load photo!\");\r\n        }\r\n    }\r\n\r\n\r\n    private <T extends Serializable, Method extends BotApiMethod<T>> T executeTelegramApiMethod(Method method) {\r\n            return sendApiMethodLog(method);\r\n    }\r\n\r\n    private Message executeTelegramApiMethod(SendPhoto message) {\r\n            return executeLog(message);\r\n    }\r\n\r\n    public Message executeLog (SendPhoto message) {\r\n        try {\r\n            log.info(\"Отправка запроса: {}\", message);\r\n            Message response = super.execute(message);\r\n            log.info(\"Ответ Telegram API: {}\", response);\r\n            return response;\r\n        } catch (TelegramApiException e) {\r\n            log.error(\"Ошибка при execute(): \", e);\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public <T extends Serializable> T sendApiMethodLog(BotApiMethod<T> method) {\r\n        try {\r\n            log.info(\"Отправка API метода: {}\", method);\r\n            T response = super.sendApiMethod(method);\r\n            log.info(\"Ответ API: {}\", response);\r\n            return response;\r\n        } catch (TelegramApiException e) {\r\n            log.error(\"Ошибка при sendApiMethod(): \", e);\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/javarush/telegram/MultiSessionTelegramBot.java b/src/main/java/com/javarush/telegram/MultiSessionTelegramBot.java
--- a/src/main/java/com/javarush/telegram/MultiSessionTelegramBot.java	(revision b5ad24279d21f4eb520f8814cd268a54f89f2802)
+++ b/src/main/java/com/javarush/telegram/MultiSessionTelegramBot.java	(date 1756678477277)
@@ -332,7 +332,11 @@
     }
 
     private Message executeTelegramApiMethod(SendPhoto message) {
-            return executeLog(message);
+        try {
+            return super.execute(message);
+        } catch (TelegramApiException e) {
+            throw new RuntimeException(e);
+        }
     }
 
     public Message executeLog (SendPhoto message) {
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>target/\r\n!.mvn/wrapper/maven-wrapper.jar\r\n!**/src/main/**/target/\r\n!**/src/test/**/target/\r\n\r\n### IntelliJ IDEA ###\r\n.idea/modules.xml\r\n.idea/jarRepositories.xml\r\n.idea/compiler.xml\r\n.idea/libraries/\r\n*.iws\r\n*.iml\r\n*.ipr\r\n\r\n### Eclipse ###\r\n.apt_generated\r\n.classpath\r\n.factorypath\r\n.project\r\n.settings\r\n.springBeans\r\n.sts4-cache\r\n\r\n### NetBeans ###\r\n/nbproject/private/\r\n/nbbuild/\r\n/dist/\r\n/nbdist/\r\n/.nb-gradle/\r\nbuild/\r\n!**/src/main/**/build/\r\n!**/src/test/**/build/\r\n\r\n### VS Code ###\r\n.vscode/\r\n\r\n### Mac OS ###\r\n.DS_Store
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision b5ad24279d21f4eb520f8814cd268a54f89f2802)
+++ b/.gitignore	(date 1756677866853)
@@ -8,6 +8,7 @@
 .idea/jarRepositories.xml
 .idea/compiler.xml
 .idea/libraries/
+.idea
 *.iws
 *.iml
 *.ipr
